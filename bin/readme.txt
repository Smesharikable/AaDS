1) Быстрое умножение полиномов.

Программа выполняет перемножение полиномов двумя способами. Впрямую и с помощью
быстрого преобразования Фурье.
Быстрое преобразование Фурье выполняется итеративно с использованием "преобразования бабочки"

Чтобы запустить программу перемножения полиномов, нужно, находясь в директории bin,
ввести в командную строку: java aads.TestFFT

После того как программа запустилась, нужно ввести коэффициенты полиномов.
Для каждого полинома сначала вводится количество его коэффициентов, считая 0е.
(Фактически, его степень + 1). Затем, по одному вводятся сами коэффициенты.
Чтобы ввести коэффициенты, введите число и нажмите ENTER.

Это будет выглядеть примерно так:
Please input _count_ of coefficients of first polinom.
4
Please input _coefficients_ of first polinom.
1
2
3
4

Со вторым полиномом - аналогично.

После того как будет введет последний коэффициент, к введенным полиномам 
применяется БПФ, они перемножаются и к полученному полиному применяется ДПФ
для получения результата. При этом на экран будут выводиться промежуточные вычисления.
Выводятся начальные значения коэффициентов, а затем коэффициенты, попарно
вычисляемые с помощью "преобразования бабочки".

В конце выводится полученный полином.


2, 3) Вычисление арифметических выражение в ПОЗ для различных реализаций стека.
Обход бинарного дерева, восстановление структуры выражения различными обходами.

Чтобы запустить программу TestSyntacticTree, выполняющую эти действия, нужно, находясь в директории bin,
ввести в командную строку: java aads.TestSysntacticTree

После приглашения:
"Please, input desired expression without spaces."
Нужно ввести африфметическое выражение не содержащее пробелов и нажать Enter.
Выражение может состоять из целых чисел и сиволов: (, ), +, -, *, /.
Например:
(1+2)*(-1)+15/2*(-2)

После этого можно ввести слово 'show', чтобы увидеть как изменяется стек.
Или просто нажать Enter.

Далее на экран выведется:
- посроенное по этому выражению дерево
- результаты различных обходов этого дерева, с воостановленным выражением в различной форме
- если было введено show, то выражение будет вычесленно дважды. Первый раз с помощью стека на листе,
второй - с помощью стека на массиве.
- если show не вводилось, то выражение вычислится с помошью стека на листе.


4) Представление и обход бинарного дерева в массиве: вычисляемые ссылки, плотное представление,
прошитое дерево.

Чтобы запустить соответствующую программу, нужно, находясь в директории bin,
ввести в командную строку: java aads.ArrayTreeTravers

Сначала необходимо ввести количество узлов дерева, нажать Enter.
Если было введено 0, то будет показан пример по-умочанию.

Далее вводятся значения узлов. Чтобы обозначить пустой узел, вводится "".
Пример:

"Please, input number of nodes, including empty nodes."
"Input 0 to see default example"
5
"Please, input nodes value."
"Type "" to input empty node."
Ad
BC
""
LK
""


После этого, на основе введенных данных создастся дерево на массиве
и выведется его представление. Затем выведется результат инфиксного обхода.
После произойдет уплотнение дерева, выдется измененно представление и
результат инфиксного обхода уплотненного дерева.

Если после это ввести 'sew', то данное дерево преобразуется в прошитое, и
на экран выведется представление прошитого дерева. В нем, узел вида 'А]'
обозначает "нить", ведущую в узел 'А'.